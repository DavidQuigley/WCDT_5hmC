geom_vline(xintercept = 0, color = "black", alpha = 0.5,linetype = "dashed", size = 2) +
geom_vline(xintercept = median(theDF$C,na.rm=T), color = theCol, alpha = 0.5, linetype = "dashed", size = 2) +
labs(title = "Correlation 5hmC in tissue and cfDNA for protein coding genes",
y = "Density", x = "Spearman's Rho")+
theme_minimal() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 16),
plot.title = element_text(size = 16),
axis.line.x = element_line(),
axis.line.y = element_line()) +
theme(legend.position = "none")
print(p)
###########################################################################################################
# Format data
theData <- cbind(counts_wcdt_tissue_tpm,counts_wcdt_cfdna_tpm)
theSampleData <- data.frame(original_sample = colnames(theData),stringsAsFactors = F)
rownames(theSampleData) <- theSampleData$original_sample
theSampleData$base_sample <- theSampleData$original_sample
theSampleData$base_sample <- gsub("_cfdna$","",theSampleData$base_sample)
theSampleData$patient <- gsub("-.{2,4}$", "",theSampleData$base_sample)
theSampleData$is.cfdna <- grepl("cfdna",theSampleData$original_sample)
theSampleData$matched <- theSampleData$base_sample %in% gsub("_cfdna","",samples_wcdt_cfdna)
sampleData <- theSampleData[theSampleData$matched==T,]
theData_matched <- theData[,sampleData$original_sample]
ensembl_protein_coding <- gencode.v28$gene_ensembl[gencode.v28$gene_type == "protein_coding"]
theDF_matched <- theData_matched[ensembl_protein_coding,]
theDF_matched <- log2(theDF_matched+1)
dim(theDF_matched)
colnames(theDF_matched)
boxplot(t(theDF_matched[1:5,]))
boxplot(t(theDF_matched[1:500,]))
boxplot(t(theDF_matched[1:5000,]))
theVar <- apply(theDF_matched,1,var)
topVar <- theVar > quantile(theVar,cutOff)
theDF_matched <- t(theDF_matched[topVar,])
all(rownames(theDF_matched)==rownames(sampleData))
###########################################################################################################
# Select top varying genes, scale per cohort
###########################################################################################################
cutOff <- 0.9
theVar <- apply(theDF_matched,1,var)
topVar <- theVar > quantile(theVar,cutOff)
theDF_matched <- t(theDF_matched[topVar,])
all(rownames(theDF_matched)==rownames(sampleData))
theDF_scale <- rbind(scale(theDF_matched[sampleData$is.cfdna == T,]),
scale(theDF_matched[sampleData$is.cfdna == F,]))
boxplot(theDF_matched)
View(theDF_matched)
View(theDF_scale)
boxplot(theDF_scale)
sampleData <- sampleData[rownames(theDF_scale),]
all(rownames(theDF_scale)==rownames(sampleData))
# Remove genes with NAs
theDF_scale <- theDF_scale[,!apply(theDF_scale,2,function(x) sum(!is.finite(x))) > 0]
###########################################################################################################
# Figure 6D
###########################################################################################################
mat <- as.matrix(t(theDF_scale))
res <- cor(mat,method = "spearman")
basenames <- unique(sampleData$base_sample)
corrs <- matrix(NA,ncol = 2, nrow = length(basenames))
rownames(corrs) <- basenames
colnames(corrs) <- c("C_self","C_others")
for(i in 1:length(basenames)){
theBasename <- basenames[i]
tissueName <- paste0(theBasename)
cfdnaName <- paste0(theBasename,"_cfdna")
thisCorr <- res[tissueName,cfdnaName]
cfdna_names <- colnames(res)[grepl("cfdna",colnames(res))]
other_cfdna_names <- cfdna_names[!cfdna_names==cfdnaName]
avOtherCorr <- mean(res[tissueName,other_cfdna_names])
corrs[theBasename,"C_self"] <- thisCorr
corrs[theBasename,"C_others"] <- avOtherCorr
}
theDF <- data.frame(sample = rep(rownames(corrs),2),
group = c(rep("Matched",15),rep("Others",15)),
corr = c(corrs[,1],corrs[,2]),
stringsAsFactors = T)
theDF$group <- factor(theDF$group,levels = c("Others","Matched"))
p <- ggplot(theDF, aes(x = group, y = corr, fill = group)) +
geom_boxplot(outlier.shape = NA) +
theme_classic() +
geom_jitter(width = 0.1, alpha = 0.6, size = 3) +
labs(x="", y = "Spearman's Rho", title = "") +
scale_fill_manual(values = c("red3","steelblue3")) +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 16),
plot.title = element_text(size = 10, hjust = 0),
axis.line.x = element_line(),
axis.line.y = element_line(),
panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.background = element_rect(fill = "transparent"),
legend.box.background = element_rect(fill = "transparent")) +
theme(legend.position = "none")
p
###########################################################################################################
# Figure 6E
###########################################################################################################
theDF_sub <- theDF[theDF$group=="Matched",]
rownames(theDF_sub) <- theDF_sub$sample
samps2use <- gsub("_cfdna","",samples_wcdt_cfdna)
plotScatter(var1 = pred_ctfrac_wcdt_cfdna[samps2use,"ctfrac_by_5hmc_pred"], var2 = theDF_sub[samps2use,"corr"],
xLab = "ct-fraction (5hmC)", yLab = "Sample similarity (Spearman's correlation)", Main = "",
pXpos = 40, pYpos = 0.1)
###########################################################################################################
# Figure 6F
###########################################################################################################
method.distance <- "euclidean"
method.clust <- "ward.D2"
mat <- as.matrix(t(theDF_scale))
all(colnames(mat)==rownames(sampleData))
theAnno <- data.frame(Sample_type = ifelse(sampleData$is.cfdna,"cfDNA","tissue"),
patient = sampleData$patient)
rownames(theAnno) <- sampleData$original_sample
theAnno$patient <- gsub("DTB-","",theAnno$patient)
theAnno$'ct-fraction/purity'[theAnno$Sample_type == "cfDNA"] <- pred_ctfrac_wcdt_cfdna[gsub("_cfdna","",rownames(theAnno)[theAnno$Sample_type == "cfDNA"]),"ctfrac_by_5hmc_pred"]
sampsWpurity <- intersect(rownames(theAnno), rownames(metadata_wcdt_genomics))
theAnno[sampsWpurity,"ct-fraction/purity"] <- metadata_wcdt_genomics[sampsWpurity,"purity"]
sampleColors <- colorRampPalette(brewer.pal(9, "Set3"))(length(unique(theAnno$patient)))
names(sampleColors) <- unique(theAnno$patient)
column_ha <- HeatmapAnnotation(df = theAnno[,c("Sample_type","patient","ct-fraction/purity")],
Patient = anno_text(theAnno$patient, rot = 0, location = 3, just = "center",  gp = gpar(fontsize = 10)),
gap = unit(c(0,0,-0.1), "in"),
border  = TRUE,
gp = gpar(col = "black",lwd = 0.5),
show_annotation_name = T,
col = list(Sample_type = cols_biopsy_type,
patient = sampleColors,
'ct-fraction/purity' = col_fun_purity),
show_legend = c(T,F,T),
annotation_legend_param = list("Sample_type" = list(title = "Sample type")))
hm <- Heatmap(mat,
name = "5hmC levels",
top_annotation = column_ha,
clustering_distance_columns = method.distance,
clustering_distance_rows = method.distance,
clustering_method_columns = method.clust,
clustering_method_rows = method.clust,
show_row_names = F,
show_column_names = F,
show_row_dend = FALSE)
print(hm)
###########################################################################################################
# Figure 5E
# 2022-01-06
# Martin Sjoestroem
###########################################################################################################
###########################################################################################################
# Directories and filenames
createFn <- function(fn, dirBase = dir_base) {paste0(dirBase, fn)}
dir_base <- "/home/martin/mnt/data1/projects/WCDT_5hmc_2019/publication_reproduce/cancer_research_revision_1/"
fn_load_5hmc_environment <- createFn("/data/hmc_220428.RData")
###########################################################################################################
# Load environment
###########################################################################################################
load(fn_load_5hmc_environment)
lapply(libraries_to_load,require,character.only = T)
###########################################################################################################
# Settings and setup
endpoint <- "dead"
endpoint_time <- "OS.months"
all(rownames(clin_ubc)==colnames(counts_ubc_cfdna_tpm))
rownames(clin_ubc)==colnames(counts_ubc_cfdna_tpm)
pats2use <- colnames(counts_ubc_cfdna_tpm)
clin_ubc <- clin_ubc[pats2use,]
hmc_ubc <- as.matrix(counts_ubc_cfdna_tpm[,pats2use])
theSig <- gi_sig
tissuemap_gi_score_ubc <- rowSums(tissue_map_ubc[pats2use,theSig,drop=F])
all(names(tissuemap_gi_score_ubc)==rownames(clin_ubc))
clin_ubc$tissuemap_gi_score <- tissuemap_gi_score_ubc
clin_covars <- c("age.at.CRPC","PSA.1L","type.1L","docetaxel.for.mHSPC","time.to.CRPC.from.ADT","Hb.1L","visceral.met")
clin_covars_ctfrac_targeted <- c("age.at.CRPC","PSA.1L","type.1L","docetaxel.for.mHSPC","time.to.CRPC.from.ADT","Hb.1L","visceral.met","est_ctfrac_targeted")
###########################################################################################################
#Functions
plotGGsurv <- function(theGGdata, colEvent, colTime, colGroup, clinCovars = NULL, coxGroup = NULL,
groupLevels = c(FALSE,TRUE),
groupLabels = c("FALSE","TRUE"),
baseName = NULL,
Title = "Title",
xLab = "Months",
yLab = "Overall survival",
xLim = c(0,42),
yLim = c(0,1),
Colors = cols2,
textXpos = 25,
textYpos = 0.8,
legendXpos = 0.13,
legendYpos = 0.3,
adjustHR = FALSE,
uni_P  = c("wald","logrank"),
add_default_pvalue = TRUE,
savePlot = FALSE,
plotH = 8,
plotW = 9)
{
# Data checks
# Check factors
if(!all(groupLevels %in% theGGdata[,colGroup])){
stop("Not all group leveles are found in variable!")
}
if(!(all(unique(theGGdata[,colGroup]) %in% groupLevels))){
stop("Not all group levels in variable are supplied!")
}
if(sum(is.na(theGGdata[,colGroup])) > 1){
stop("groupLevels contains NAs!")
}
if(length(unique(groupLevels)) > 2){
TREND = TRUE
} else{
TREND = FALSE
}
theGGdata[,colGroup] <- factor(theGGdata[,colGroup],levels = groupLevels, labels = groupLabels)
theGGdata[,colGroup] <- as.numeric(theGGdata[,colGroup])
theSurv <- Surv(time = theGGdata[,colTime], event = theGGdata[,colEvent])
theFit <- surv_fit(theSurv ~ theGGdata[,colGroup], data = theGGdata)
if(is.null(coxGroup)){
theCoxSummary <- summary(coxph(theSurv ~ ., data = theGGdata[,colGroup, drop = F]))
print(theCoxSummary)
P_wald_uni <- signif(theCoxSummary$coefficients[colGroup,"Pr(>|z|)"],2)
P_wald_uni
HR <- signif(theCoxSummary$coefficients[colGroup,"exp(coef)"],2)
HRci <- paste0("[",
signif(theCoxSummary$conf.int[colGroup,"lower .95"],2),
"-",
signif(theCoxSummary$conf.int[colGroup,"upper .95"],2),
"]")
if(length(groupLevels) == 2){
survdiff_obj <- survdiff(theSurv~theGGdata[,colGroup])
pval_logrank <- 1 - pchisq(survdiff_obj$chisq, length(survdiff_obj$n) - 1)
pval_logrank <- signif(pval_logrank,2)
} else {
pval_logrank <- "NA, not currently available for more than 2 groups!"
}
if(uni_P == "wald"){
theText = paste0("HR = ",HR," ",HRci,"\nP (Wald) = ",P_wald_uni)
}else if(uni_P=="logrank"){
theText = paste0("HR = ",HR," ",HRci,"\nP (logrank) = ",pval_logrank)
}else{
stop("Univariate p-value must be specified as logrank or wald")
}
if(adjustHR){
theAdjustedCoxSummary <- summary(coxph(theSurv~., data = theGGdata[,c(colGroup,clinCovars)]))
print(theAdjustedCoxSummary)
Padj <- signif(theAdjustedCoxSummary$coefficients[colGroup,"Pr(>|z|)"],2)
HRadj <- signif(theAdjustedCoxSummary$coefficients[colGroup,"exp(coef)"],2)
HRciadj <- paste0("[",
signif(theAdjustedCoxSummary$conf.int[colGroup,"lower .95"],2),
"-",
signif(theAdjustedCoxSummary$conf.int[colGroup,"upper .95"],2),
"]")
theText = paste0(theText,"\n", "Adj. HR = ",HRadj," ",HRciadj,"\nAdj. P (Wald) = ",Padj)
}
}else{
theCoxSummary <- summary(coxph(theSurv ~ ., data = theGGdata[,coxGroup, drop = F]))
P_wald_uni <- signif(theCoxSummary$coefficients[coxGroup,"Pr(>|z|)"],2)
P_wald_uni
HR <- signif(theCoxSummary$coefficients[coxGroup,"exp(coef)"],2)
HRci <- paste0("[",
signif(theCoxSummary$conf.int[coxGroup,"lower .95"],2),
"-",
signif(theCoxSummary$conf.int[coxGroup,"upper .95"],2),
"]")
theText = paste0("HR = ",HR," ",HRci,"\nP (Wald) = ",P_wald_uni)
if(adjustHR){
theAdjustedCoxSummary <- summary(coxph(theSurv~., data = theGGdata[,c(coxGroup,clinCovars)]))
print(theAdjustedCoxSummary)
Padj <- signif(theAdjustedCoxSummary$coefficients[coxGroup,"Pr(>|z|)"],2)
HRadj <- signif(theAdjustedCoxSummary$coefficients[coxGroup,"exp(coef)"],2)
HRciadj <- paste0("[",
signif(theAdjustedCoxSummary$conf.int[coxGroup,"lower .95"],2),
"-",
signif(theAdjustedCoxSummary$conf.int[coxGroup,"upper .95"],2),
"]")
theText = paste0(theText,"\n", "Adj. HR = ",HRadj," ",HRciadj,"\nAdj. P (Wald) = ",Padj)
}
}
#print(theText)
#survplot(theFit)
#plot(theFit)
theGGsurv <- ggsurvplot(theFit,
#data = theGGdata, # does not matter when it is inside the function?
pval = add_default_pvalue,
pval.coord = c(2,0.05),
test.for.trend = TREND,
risk.table = TRUE,
risk.table.pos = "out",
palette = Colors,
size = 1,
risk.table.height = 0.2,
xlab = xLab,
ylab = yLab,
risk.table.y.text.col = TRUE,
risk.table.y.text = FALSE,
tables.theme = theme_cleantable(plot.title = element_text(size = 14)),
legend.labs = groupLabels,
conf.int = FALSE,
legend.title = "",
title = Title,
risk.table.title = "Number at risk",
legend = c(legendXpos,legendYpos),
censor.size = 10,
font.title = c(18,"bold"),
font.x = c(18),
font.y = c(18),
font.tickslab = c(14),
risk.table.font.size = 16,
axes.offset = FALSE,
xlim = xLim,
ylim = yLim
)
theGGsurv$plot <- theGGsurv$plot + ggplot2::annotate("text", x = textXpos, y = textYpos, label = theText, hjust = 0, cex = 5)
theGGsurv$plot <- theGGsurv$plot + theme(plot.title = element_text(hjust = 0.5),
legend.text = element_text(size = 14))
print(theGGsurv)
### SAVE as PDF and PNG
if(savePlot){
pdf(file = paste0(baseName,".pdf"), width = plotW, height = plotH, onefile = FALSE)
print(theGGsurv)
dev.off()
png(filename = paste0(baseName,".png"), width = plotW, height = plotH, units = "in", res = 300)
print(theGGsurv)
dev.off()
}
}
plotScatter <- function(var1,var2,xLab = "xlab", yLab = "ylab", Main = "main", pXpos = 1, pYpos = 1,...){
C <- signif(cor(var1,var2, use = "complete.obs", method = "spearman"),2)
P <- signif(cor.test(var1,var2,use = "complete.obs", method = "spearman")$p.value,2)
if(P==0){
P <- "< 2.2e-16"
}
fit <-  lm(var2~var1)
A <- fit$coefficients[1]
B <- fit$coefficients[2]
plot(var1,var2,xlab = xLab, ylab = yLab, main = Main,
pch = 16, cex = 1.5, col = "darkblue")
text(x = pXpos, y = pYpos, labels = paste0("Rho = ",C,"\nP = ",P))
abline(a=A,b=B,lty = 2, lwd = 2, col = 2)
}
getTertiles <- function(theScore){
tertiles <- rep(NA, length(theScore))
tertiles[theScore < quantile(theScore,0.33, na.rm=T)] <- 1
tertiles[theScore >= quantile(theScore,0.33, na.rm=T)] <- 2
tertiles[theScore >= quantile(theScore,0.67, na.rm=T)] <- 3
return(tertiles)
}
###########################################################################################################
# Figure S9A
###########################################################################################################
mat <- as.matrix(log2(hmc_ubc+1))
all(rownames(mat)==rownames(ensembl2sym))
mat <- mat[ensembl2sym$type=="protein_coding",]
theVars <- apply(mat, 1, var)
highVar <- theVars > quantile(theVars, 0.8)
mat <- mat[highVar,]
res.pca <- prcomp(t(mat), scale = T)
table(rownames(res.pca$x)==rownames(clin_ubc))
X <- as.data.frame(res.pca$x)
myPalette <- colorRampPalette(viridis(12,option = "E"))
colorVar <- clin_ubc$est_ctfrac_targeted
p <- ggplot(X, aes(x = PC1, y = PC2, label = rownames(X))) +
geom_point(aes(colour = colorVar), size = 4) +
#geom_text_repel(max.overlaps = 10) +
scale_colour_gradientn(colours = myPalette(100), limits=c(min(colorVar),max(colorVar)),name = "ct-fraction (DNA-seq)") +
theme_classic() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 14),
axis.line.x = element_line(),
axis.line.y = element_line())
p
dev.off()
plotScatter(clin_ubc$est_ctfrac_targeted*100,clin_ubc$est_ctfrac_5hmc, yLab = "ct-fraction predicted by 5hmC (%)",
xLab = "ct-fraction by targeted DNA-seq (%)", Main = "",pXpos = 75, pYpos = 25)
cor.test(clin_ubc$est_ctfrac_targeted*100,clin_ubc$prostate, method = "spearman")
cor.test(clin_ubc$est_ctfrac_targeted*100,clin_ubc$bone.marrow, method = "spearman")
plotScatter(clin_ubc$est_ctfrac_targeted*100,clin_ubc$prostate, yLab = "Tissue Map prostate score",
xLab = "ct-fraction by targeted DNA-seq (%)", Main = "5hmC prostate score vs. ct-fraction",pXpos = 50, pYpos = 0.3)
plotScatter(clin_ubc$est_ctfrac_targeted*100,clin_ubc$bone.marrow, yLab = "Tissue Map bone marrow",
xLab = "ct-fraction by targeted DNA-seq (%)", Main = "5hmC bone marrow score vs. ct-fraction",pXpos = 70, pYpos = 0.8)
###########################################################################################################
# Figure S9C
###########################################################################################################
clin_ubc$est_ctfrac_targeted_tertiles <- getTertiles(clin_ubc$est_ctfrac_targeted)
plotGGsurv(theGGdata = clin_ubc, colEvent = "dead", colTime = "os", colGroup = "est_ctfrac_targeted_tertiles", clinCovars = clin_covars, adjustHR = TRUE,
groupLevels = c(1,2,3), groupLabels = c("Low","Medium","High"), Colors = cols3,
baseName = paste0(dir_out_figures,"/Figure_S9C"), savePlot = FALSE,
Title = "ct-fraction (targeted DNA-seq)",
add_default_pvalue = FALSE)
###########################################################################################################
# Figure 7B
###########################################################################################################
clin_ubc$est_ctfrac_5hmc_tertiles <- getTertiles(clin_ubc$est_ctfrac_5hmc)
plotGGsurv(theGGdata = clin_ubc, colEvent = "dead", colTime = "os", colGroup = "est_ctfrac_5hmc_tertiles", clinCovars = clin_covars, adjustHR = TRUE,
groupLevels = c(1,2,3), groupLabels = c("Low","Medium","High"), Colors = cols3,
baseName = paste0(dir_out_figures,"/Figure_7B"), savePlot = FALSE,
Title = "ct-fraction, by 5hmC",
add_default_pvalue = FALSE)
###########################################################################################################
theGenes <- c("AR","MYC","FOXA1","PIK3CA","TP53","RB1","BRCA2","PTEN","NKX3-1","ERG","BRAF","NCOA2","TOP2A","EZH2","MKI67","AURKA", "SPOP","CLU","ATM","CHD1","SPINK1", "CTNNB1","AKT1","MYCN","ZBTB16","NCOR1","NCOR2","SPOP")
geneTypes <- c("gain","gain","gain","gain","loss","loss","loss","loss","loss", "gain","gain","gain","gain","gain","gain","gain","gain","loss","loss", "loss", "gain","gain","gain","gain","loss","gain","gain","loss")
stopifnot(all(rownames(clin_ubc)==colnames(hmc_ubc)))
View(cbind(theGenes, geneTypes))
stopifnot(all(rownames(clin_ubc)==colnames(hmc_ubc)))
for(i in 1:length(theGenes)){
theGeneSymbol <- theGenes[i]
geneType <- geneTypes[i]
theGene <- rownames(ensembl2sym)[ensembl2sym$name==theGeneSymbol]
stopifnot(length(theGene)==1)
cutoff <- NA
if(geneType == "gain"){
cutoff <- 0.75
}else{
cutoff <- 0.25
}
hmc_score <- hmc_ubc[theGene,]
hmc_high <- hmc_score > quantile(hmc_score,cutoff)
# Handle dashes (e.g. NKX3-1)
hmc_name <- gsub("-","_",paste0(theGeneSymbol,"_hmc_high"))
wgs_name <- gsub("-","_",paste0(theGeneSymbol,"_wgs_high"))
clin_ubc[,hmc_name] <- hmc_high
}
###########################################################################################################
# Figure 7D
###########################################################################################################
clin_ubc$ezh2_top2a_comb <- clin_ubc$EZH2_hmc_high + clin_ubc$TOP2A_hmc_high
plotGGsurv(theGGdata = clin_ubc, colEvent = "dead", colTime = "os", colGroup = "ezh2_top2a_comb", clinCovars = clin_covars_ctfrac_targeted, adjustHR = TRUE,
groupLevels = c(0,1,2), groupLabels = c("None","Either","Both"), Colors = cols3,
baseName = paste0(dir_out_figures,"/Figure_7D"), savePlot = FALSE,
Title = "EZH2 and TOP2A",
add_default_pvalue = FALSE, legendXpos = 0.10, legendYpos = 0.15)
###########################################################################################################
# Prep data
###########################################################################################################
tsgs <- c("TP53", "RB1","PTEN","BRCA1","BRCA2","APC","ATM","CDK12","CHD1","NKX3-1","SPOP","ZFHX3","CLU","CHD1")
oncg <- c("AR","MYC","PIK3CA","FOXA1","NCOA2","ERG","BRAF","MED12","AKT1")
cutoff_tsg <- 0.25
cutoff_oncogene <- 0.75
stopifnot(all(rownames(clin_ubc)==colnames(hmc_ubc)))
for(i in 1:length(tsgs)){
theGeneSymbol <- tsgs[i]
theGene <- rownames(ensembl2sym)[ensembl2sym$name==theGeneSymbol]
stopifnot(length(theGene)==1)
hmc_score <- hmc_ubc[theGene,]
hmc_low <- hmc_score < quantile(hmc_score,cutoff_tsg)
hmc_name <- gsub("-","_",paste0(theGeneSymbol,"_hmc_loss"))
clin_ubc[,hmc_name] <- hmc_low
}
for(i in 1:length(oncg)){
theGeneSymbol <- oncg[i]
theGene <- rownames(ensembl2sym)[ensembl2sym$name==theGeneSymbol]
stopifnot(length(theGene)==1)
hmc_score <- hmc_ubc[theGene,]
hmc_high <- hmc_score > quantile(hmc_score,cutoff_oncogene)
hmc_name <- gsub("-","_",paste0(theGeneSymbol,"_hmc_gain"))
clin_ubc[,hmc_name] <- hmc_high
}
clin_ubc$nb_alt_hmc <- rowSums(clin_ubc[,c("TP53_hmc_loss","RB1_hmc_loss","AR_hmc_gain", "MYC_hmc_gain", "BRCA2_hmc_loss", "NCOA2_hmc_gain", "PTEN_hmc_loss", "NKX3_1_hmc_loss")])
clin_ubc$nb_alt_targ <- rowSums(clin_ubc[,c("tp53_loss_mut","rb1_loss_mut","brca2_1loss_mut","AR_ampl","myc_gain","nkx31_loss","ncoa2_gain","pten_loss_mut")])
get3levels <- function(theScore){
comb_score <- theScore
comb_score[comb_score < 2] <- 0
comb_score[comb_score %in% c(2:3)] <- 1
comb_score[comb_score > 3 ] <- 2
return(comb_score)
}
clin_ubc$nb_alt_hmc_3 <- get3levels(clin_ubc$nb_alt_hmc)
clin_ubc$nb_alt_targ_3 <- get3levels(clin_ubc$nb_alt_targ)
plotGGsurv(theGGdata = clin_ubc, colEvent = "dead", colTime = "os", colGroup = "nb_alt_hmc_3", coxGroup = "nb_alt_hmc", clinCovars = clin_covars_ctfrac_targeted, adjustHR = TRUE,
groupLevels = c(0,1,2), groupLabels = c("0-1","2-3","4+"), Colors = cols3,
baseName = paste0(dir_out_figures,"/Figure_7C"), savePlot = FALSE,
Title = "Number of alterations by 5hmC",
add_default_pvalue = FALSE)
###########################################################################################################
# Figure S9D
###########################################################################################################
# NB this analysis used full variable with number of alterations to keep info. I.e. the HR is not for the plotted curves, which are grouped to avoid overplotting.
plotGGsurv(theGGdata = clin_ubc, colEvent = "dead", colTime = "os", colGroup = "nb_alt_targ_3", coxGroup = "nb_alt_targ", clinCovars = clin_covars_ctfrac_targeted, adjustHR = TRUE,
groupLevels = c(0,1,2), groupLabels = c("0-1","2-3","4+"), Colors = cols3,
baseName = paste0(dir_out_figures,"/Figure_S9D"), savePlot = FALSE,
Title = "Number of alterations by targeted DNA-seq",
add_default_pvalue = FALSE)
dim(hmc_ubc)
colnames(hmc_ubc)
colnames(hmc_ubc) == rownames(clin_ubc)
top2a_ens <- rownames(ensembl2sym)[ensembl2sym$name=="TOP2A"]
ezh2_ens <- rownames(ensembl2sym)[ensembl2sym$name=="EZH2"]
top2a_high <- hmc_ubc[top2a_ens,] > quantile(hmc_ubc[top2a_ens,].0/75)
top2a_high <- hmc_ubc[top2a_ens,] > quantile(hmc_ubc[top2a_ens,],0.75)
ezh2_high <- hmc_ubc[ezh2_ens,] > quantile(hmc_ubc[ezh2_ens,],0.75)
top2a_high
ezh2_high
comb <- top2a_high+ezh2_high
comb
names(comb)==rownames(clin_ubc)
View(clin_ubc)
thefit <- npsurv(Surv(clin_ubc$os, clin_ubc$dead)~comb)
thefit
survplot(thefit)
top2a_high
ezh2_high
coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb)
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L + clin_ubc$docetaxel.for.mHSPC))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L + clin_ubc$docetaxel.for.mHSPC + clin_ubc$time.to.CRPC.from.ADT))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L + clin_ubc$docetaxel.for.mHSPC + clin_ubc$time.to.CRPC.from.ADT + clin_ubc$Hb.1L))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L + clin_ubc$docetaxel.for.mHSPC + clin_ubc$time.to.CRPC.from.ADT + clin_ubc$Hb.1L + clin_ubc$visceral.met))
summary(coxph(Surv(clin_ubc$os, clin_ubc$dead)~comb + clin_ubc$age.at.CRPC + clin_ubc$PSA.1L + clin_ubc$type.1L + clin_ubc$docetaxel.for.mHSPC + clin_ubc$time.to.CRPC.from.ADT + clin_ubc$Hb.1L + clin_ubc$visceral.met + clin_ubc$est_ctfrac_targeted))
